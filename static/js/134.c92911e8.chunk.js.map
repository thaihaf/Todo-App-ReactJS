{"version":3,"file":"static/js/134.c92911e8.chunk.js","mappings":"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","sources":["hooks/useTaskForm/useTaskForm.js","pages/Tasks/Components/actions/CreateTask/index.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport IsEmptyObject from \"../../untils/checkObject/IsEmptyObject\";\r\n\r\nconst useTaskForm = (type, HandleEditTask, task) => {\r\n  const [values, setValues] = useState({ title: task ? task.title : \"\" });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const setEmptyValues = () => {\r\n    setValues({ ...values, title: \"\" });\r\n    setErrors({});\r\n  };\r\n  const validateInfo = (values) => {\r\n    let errors = {};\r\n\r\n    const titleTemp = values.title.trim();\r\n\r\n    if (!titleTemp) {\r\n      errors.title = \"Title must be required\";\r\n    } else if (titleTemp.length < 2) {\r\n      errors.title = \"Name to be 6 charactor or more\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let errorsTemp = validateInfo(values);\r\n    setErrors(errorsTemp);\r\n\r\n    if (IsEmptyObject(errorsTemp)) {\r\n      HandleEditTask(values);\r\n      if (type === \"create\") {\r\n        setEmptyValues();\r\n      }\r\n    }\r\n  };\r\n\r\n  return { handleChange, handleSubmit, setEmptyValues, values, errors };\r\n};\r\n\r\nexport default useTaskForm;\r\n","// lib\r\nimport { createUseStyles } from \"react-jss\";\r\nimport clsx from \"clsx\";\r\nimport { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport useTaskForm from \"../../../../../hooks/useTaskForm/useTaskForm\";\r\nimport taskAPI from \"../../../../../untils/fetchAPI/taskAPI\";\r\nimport { getData } from \"../../../../../redux/slice/dataSlice\";\r\n\r\nconst useStyles = createUseStyles({\r\n  CreateTask: {\r\n    top: \"0\",\r\n    left: \"0\",\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    zIndex: \"11\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  createTask__bg: {\r\n    backgroundColor: \"#000\",\r\n    opacity: \"70%\",\r\n  },\r\n  createTask__container: {\r\n    width: \"42rem\",\r\n    minWidth: \"48rem\",\r\n    marginTop: \"6rem\",\r\n    padding: \"2rem\",\r\n    backgroundColor: \"#1D1D27\",\r\n    textAlign: \"left\",\r\n    borderRadius: \"1.6rem\",\r\n  },\r\n  createTask__caption: {\r\n    fontSize: \"2rem\",\r\n    textTransform: \"capitalize\",\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"2rem\",\r\n  },\r\n  createTask__title: {\r\n    fontSize: \"1.6rem\",\r\n    textTransform: \"capitalize\",\r\n    marginBottom: \"1rem\",\r\n  },\r\n  createTask__colors: {\r\n    display: \"grid\",\r\n    gap: \"1.5rem\",\r\n    gridTemplateColumns: \"repeat(auto-fit, 6rem)\",\r\n  },\r\n  createTask__color: {\r\n    width: \"6rem\",\r\n    height: \"5rem\",\r\n    backgroundColor: \"transparent\",\r\n    cursor: \"pointer\",\r\n    borderRadius: \"1.2rem\",\r\n    position: \"relative\",\r\n  },\r\n  createTask__buttons: {\r\n    gap: \"1rem\",\r\n    marginTop: \"5rem\",\r\n  },\r\n  createTask__group: {\r\n    marginBottom: \"2rem\",\r\n    width: \"100%\",\r\n  },\r\n  createTask__err: {\r\n    color: \"red\",\r\n    padding: \"1rem\",\r\n    fontSize: \"1.4rem\",\r\n  },\r\n  createTask__listColls: {\r\n    height: \"16rem\",\r\n    overflowY: \"scroll\",\r\n    borderRadius: \"1.2rem\",\r\n    border: \"3px solid var(--background-color-header)\",\r\n  },\r\n  createTask__itemColl: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: \"1rem\",\r\n    borderBottom: \"2px solid var(--background-color-header)\",\r\n    gap: \"1rem\",\r\n    cursor: \"pointer\",\r\n  },\r\n  createTask__checkbox: {\r\n    color: \"var(--bg-btn-pink)\",\r\n    backgroundColor: \"transparent\",\r\n    width: \"1.7rem\",\r\n    height: \"1.7rem\",\r\n  },\r\n  createTask__lable: {\r\n    fontSize: \"1.6rem\",\r\n  },\r\n});\r\n\r\nconst CreateTask = ({\r\n  listCollections,\r\n  toggleFunc,\r\n  displayVal,\r\n  handleChangeData,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [listSelections, setListSelections] = useState([]);\r\n\r\n  const HandleCreateTask = async (values) => {\r\n    let title = values.title;\r\n    let categoryIds = listSelections;\r\n    let data = { title, categoryIds };\r\n\r\n    try {\r\n       await taskAPI().createTask(data);\r\n\r\n      setListSelections([]);\r\n      toast.success(\"ðŸ¦„ Create Task Successful!\");\r\n      toggleFunc(false)();\r\n\r\n      handleChangeData(getData());\r\n    } catch (error) {\r\n      let errForm = error.message;\r\n      toast.error(errForm);\r\n    }\r\n  };\r\n\r\n  const { handleChange, handleSubmit, setEmptyValues, values, errors } =\r\n    useTaskForm(\"create\", HandleCreateTask);\r\n\r\n  const closeTabFunc = () => (event) => {\r\n    setEmptyValues();\r\n    setListSelections([]);\r\n    toggleFunc(false)();\r\n  };\r\n\r\n  const handleChangeOption = (id) => (event) => {\r\n    let checked = event.target.checked;\r\n    let existing = listSelections.includes(id);\r\n\r\n    if (existing && !checked) {\r\n      const newArr = listSelections.filter((select) => select !== id);\r\n      setListSelections(newArr);\r\n    } else if (!existing && checked) {\r\n      setListSelections([...listSelections, id]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        classes.CreateTask,\r\n        \"m-auto position-fixed\",\r\n        !displayVal && \"d-none\"\r\n      )}\r\n    >\r\n      <div\r\n        className={clsx(\r\n          classes.createTask__bg,\r\n          \"w-100 h-100 position-absolute\"\r\n        )}\r\n        onClick={closeTabFunc(false)}\r\n      ></div>\r\n\r\n      <div className={clsx(classes.createTask__container, \"position-absolute\")}>\r\n        <form method=\"post\" onSubmit={handleSubmit}>\r\n          <div className=\"createTask__top d-flex w-100\">\r\n            <div className={clsx(classes.createTask__caption, \"mr-auto\")}>\r\n              create Task\r\n            </div>\r\n            <div\r\n              className=\"createTask__close-btn\"\r\n              onClick={closeTabFunc(false)}\r\n            >\r\n              <ion-icon name=\"close\"></ion-icon>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={clsx(classes.createTask__group, \"bar-title\")}>\r\n            <div className={clsx(classes.createTask__title)}>Title</div>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"My Task\"\r\n              className=\"btn--outline w-100 py-3\"\r\n              style={{ fontSize: \"1.6rem\" }}\r\n              name=\"title\"\r\n              value={values.title}\r\n              onChange={handleChange}\r\n            />\r\n            {errors.title && (\r\n              <div className={clsx(classes.createTask__err)}>\r\n                *{errors.title}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className={clsx(classes.createTask__group, \"bar-listColl\")}>\r\n            <div className={clsx(classes.createTask__title)}>\r\n              List Collection\r\n            </div>\r\n            <div className={clsx(classes.createTask__listColls)}>\r\n              {listCollections.map((item) => {\r\n                return (\r\n                  <div\r\n                    key={item.id}\r\n                    className={clsx(classes.createTask__itemColl)}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className={clsx(classes.createTask__checkbox)}\r\n                      checked={listSelections.find((id) => id === item.id) || \"\"}\r\n                      onChange={handleChangeOption(item.id)}\r\n                    />\r\n                    <span className={clsx(classes.createTask__lable)}>\r\n                      {item.name}\r\n                    </span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={clsx(classes.createTask__buttons, \"w-100 d-flex\")}>\r\n            <button\r\n              className=\"createTask__button button btn--none-border btn--hover-bg-gray-light ml-auto mb-0\"\r\n              style={{ backgroundColor: \"#3D3C50\" }}\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </button>\r\n            <button\r\n              type=\"reset\"\r\n              className=\"createTask__button button btn--none-border btn--hover-bg-gray mb-0\"\r\n              onClick={closeTabFunc()}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateTask;\r\n"],"names":["type","HandleEditTask","task","useState","title","values","setValues","errors","setErrors","setEmptyValues","handleChange","e","target","name","value","handleSubmit","preventDefault","errorsTemp","titleTemp","trim","length","validateInfo","IsEmptyObject","useStyles","createUseStyles","CreateTask","top","left","width","height","display","justifyContent","zIndex","color","createTask__bg","backgroundColor","opacity","createTask__container","minWidth","marginTop","padding","textAlign","borderRadius","createTask__caption","fontSize","textTransform","fontWeight","marginBottom","createTask__title","createTask__colors","gap","gridTemplateColumns","createTask__color","cursor","position","createTask__buttons","createTask__group","createTask__err","createTask__listColls","overflowY","border","createTask__itemColl","alignItems","borderBottom","createTask__checkbox","createTask__lable","listCollections","toggleFunc","displayVal","handleChangeData","classes","listSelections","setListSelections","HandleCreateTask","data","categoryIds","taskAPI","createTask","toast","getData","errForm","message","useTaskForm","closeTabFunc","event","className","clsx","onClick","method","onSubmit","placeholder","style","onChange","map","item","checked","find","id","existing","includes","newArr","filter","select"],"sourceRoot":""}
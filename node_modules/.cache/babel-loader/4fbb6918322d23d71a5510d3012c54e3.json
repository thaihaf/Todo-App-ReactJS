{"ast":null,"code":"var _jsxFileName = \"D:\\\\4.Document\\\\Work\\\\MonstarLab\\\\Intern\\\\ReactJS\\\\todo\\\\src\\\\components\\\\home\\\\task\\\\view\\\\TaskBar.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskBar(_ref) {\n  _s();\n\n  let {\n    count,\n    status\n  } = _ref;\n  const [listStatus, setListStatus] = useState([{\n    name: \"all\",\n    value: \"All Task\"\n  }, {\n    name: \"inProcess\",\n    value: \"In Process Task\"\n  }, {\n    name: \"complete\",\n    value: \"Complete Task\"\n  }]);\n  const [selectedOption, setSelectedOption] = useState();\n\n  function handleChange(event) {\n    const optionVal = event.target.value;\n    setSelectedOption(optionVal);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task__title\",\n    style: {\n      fontSize: \"2rem\",\n      textTransform: \"capitalize\",\n      padding: \"2rem\",\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskBar__details\",\n      children: [selectedOption, \" - \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskBar__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"taskBar__action\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"taskBar__select\",\n          value: selectedOption,\n          onChange: handleChange,\n          children: listStatus.map(status => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: status.name,\n              className: \"taskBar__option\",\n              children: status.value\n            }, status.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskBar, \"UP7IQeRV39zxvzppnJkgeEK64Ek=\");\n\n_c = TaskBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBar\");","map":{"version":3,"sources":["D:/4.Document/Work/MonstarLab/Intern/ReactJS/todo/src/components/home/task/view/TaskBar.js"],"names":["React","useState","useEffect","TaskBar","count","status","listStatus","setListStatus","name","value","selectedOption","setSelectedOption","handleChange","event","optionVal","target","fontSize","textTransform","padding","display","justifyContent","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,eAAe,SAASC,OAAT,OAAoC;AAAA;;AAAA,MAAnB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAmB;AACjD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,CAC3C;AAAEO,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAD2C,EAE3C;AAAED,IAAAA,IAAI,EAAE,WAAR;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAF2C,EAG3C;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,KAAK,EAAE;AAA3B,GAH2C,CAAD,CAA5C;AAKA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,EAApD;;AAEA,WAASW,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaN,KAA/B;AACAE,IAAAA,iBAAiB,CAACG,SAAD,CAAjB;AACD;;AAED,sBACE;AACE,IAAA,SAAS,EAAC,aADZ;AAEE,IAAA,KAAK,EAAE;AACLE,MAAAA,QAAQ,EAAE,MADL;AAELC,MAAAA,aAAa,EAAE,YAFV;AAGLC,MAAAA,OAAO,EAAE,MAHJ;AAILC,MAAAA,OAAO,EAAE,MAJJ;AAKLC,MAAAA,cAAc,EAAE;AALX,KAFT;AAAA,4BAUE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,iBACGV,cADH,SACsBN,KADtB;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAcE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE;AACE,UAAA,SAAS,EAAC,iBADZ;AAEE,UAAA,KAAK,EAAEM,cAFT;AAGE,UAAA,QAAQ,EAAEE,YAHZ;AAAA,oBAKGN,UAAU,CAACe,GAAX,CAAgBhB,MAAD,IAAY;AAC1B,gCACE;AAEE,cAAA,KAAK,EAAEA,MAAM,CAACG,IAFhB;AAGE,cAAA,SAAS,EAAC,iBAHZ;AAAA,wBAKGH,MAAM,CAACI;AALV,eACOJ,MAAM,CAACG,IADd;AAAA;AAAA;AAAA;AAAA,oBADF;AASD,WAVA;AALH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;GAnDuBL,O;;KAAAA,O","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function TaskBar({ count, status }) {\r\n  const [listStatus, setListStatus] = useState([\r\n    { name: \"all\", value: \"All Task\" },\r\n    { name: \"inProcess\", value: \"In Process Task\" },\r\n    { name: \"complete\", value: \"Complete Task\" },\r\n  ]);\r\n  const [selectedOption, setSelectedOption] = useState();\r\n\r\n  function handleChange(event) {\r\n    const optionVal = event.target.value;\r\n    setSelectedOption(optionVal);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"task__title\"\r\n      style={{\r\n        fontSize: \"2rem\",\r\n        textTransform: \"capitalize\",\r\n        padding: \"2rem\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n      }}\r\n    >\r\n      <div className=\"taskBar__details\">\r\n        {selectedOption} - {count}\r\n      </div>\r\n\r\n      <div className=\"taskBar__actions\">\r\n        <div className=\"taskBar__action\">\r\n          <select\r\n            className=\"taskBar__select\"\r\n            value={selectedOption}\r\n            onChange={handleChange}\r\n          >\r\n            {listStatus.map((status) => {\r\n              return (\r\n                <option\r\n                  key={status.name}\r\n                  value={status.name}\r\n                  className=\"taskBar__option\"\r\n                >\r\n                  {status.value}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport IsEmptyObject from \"../../../service/IsEmptyObject\";\n\nconst useTaskForm = HandleEditTask => {\n  _s();\n\n  const [values, setValues] = useState({\n    oldpass: \"\",\n    newpass: \"\",\n    repass: \"\"\n  });\n  const [errors, setErrors] = useState({});\n\n  const validateInfo = values => {\n    let errors = {};\n    const oldpassTemp = values.oldpass.trim();\n    const newpassTemp = values.newpass.trim();\n    const repassTemp = values.repass.trim();\n\n    if (!oldpassTemp) {\n      errors.oldpass = \"Oldpass must be required\";\n    } else if (oldpassTemp.length < 6) {\n      errors.oldpass = \"Oldpass to be 6 charactor or more\";\n    }\n\n    if (!newpassTemp) {\n      errors.newpass = \"Newpass must be required\";\n    } else if (newpassTemp.length < 6) {\n      errors.newpass = \"Newpass to be 6 charactor or more\";\n    } else if (newpassTemp === oldpassTemp) {\n      errors.newpass = \"Newpass must be difference from oldpass\";\n    }\n\n    if (!repassTemp) {\n      errors.repassTemp = \"Repass must be required\";\n    } else if (repassTemp.length < 6) {\n      errors.repassTemp = \"Repass to be 6 charactor or more\";\n    } else if (repassTemp !== oldpassTemp) {\n      errors.repassTemp = \"Repass must be math with newpass\";\n    }\n\n    return errors;\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let errorsTemp = validateInfo(values);\n    setErrors(errorsTemp);\n\n    if (IsEmptyObject(errorsTemp)) {\n      //   HandleEditTask(values);\n      setValues({\n        oldpass: \"\",\n        newpass: \"\",\n        repass: \"\"\n      });\n    }\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useTaskForm, \"fjg8PORIh5o0AAoNr6ARpQ8p0EE=\");\n\nexport default useTaskForm;","map":{"version":3,"sources":["D:/4.Document/Work/MonstarLab/Intern/ReactJS/todo/src/components/users/services/usePasswordForm.js"],"names":["useState","IsEmptyObject","useTaskForm","HandleEditTask","values","setValues","oldpass","newpass","repass","errors","setErrors","validateInfo","oldpassTemp","trim","newpassTemp","repassTemp","length","handleChange","e","name","value","target","handleSubmit","preventDefault","errorsTemp"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,MAAMC,WAAW,GAAIC,cAAD,IAAoB;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC;AACnCM,IAAAA,OAAO,EAAE,EAD0B;AAEnCC,IAAAA,OAAO,EAAE,EAF0B;AAGnCC,IAAAA,MAAM,EAAE;AAH2B,GAAD,CAApC;AAKA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMW,YAAY,GAAIP,MAAD,IAAY;AAC/B,QAAIK,MAAM,GAAG,EAAb;AAEA,UAAMG,WAAW,GAAGR,MAAM,CAACE,OAAP,CAAeO,IAAf,EAApB;AACA,UAAMC,WAAW,GAAGV,MAAM,CAACG,OAAP,CAAeM,IAAf,EAApB;AACA,UAAME,UAAU,GAAGX,MAAM,CAACI,MAAP,CAAcK,IAAd,EAAnB;;AAEA,QAAI,CAACD,WAAL,EAAkB;AAChBH,MAAAA,MAAM,CAACH,OAAP,GAAiB,0BAAjB;AACD,KAFD,MAEO,IAAIM,WAAW,CAACI,MAAZ,GAAqB,CAAzB,EAA4B;AACjCP,MAAAA,MAAM,CAACH,OAAP,GAAiB,mCAAjB;AACD;;AACD,QAAI,CAACQ,WAAL,EAAkB;AAChBL,MAAAA,MAAM,CAACF,OAAP,GAAiB,0BAAjB;AACD,KAFD,MAEO,IAAIO,WAAW,CAACE,MAAZ,GAAqB,CAAzB,EAA4B;AACjCP,MAAAA,MAAM,CAACF,OAAP,GAAiB,mCAAjB;AACD,KAFM,MAEA,IAAIO,WAAW,KAAKF,WAApB,EAAiC;AACtCH,MAAAA,MAAM,CAACF,OAAP,GAAiB,yCAAjB;AACD;;AACD,QAAI,CAACQ,UAAL,EAAiB;AACfN,MAAAA,MAAM,CAACM,UAAP,GAAoB,yBAApB;AACD,KAFD,MAEO,IAAIA,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AAChCP,MAAAA,MAAM,CAACM,UAAP,GAAoB,kCAApB;AACD,KAFM,MAEA,IAAIA,UAAU,KAAKH,WAAnB,EAAgC;AACrCH,MAAAA,MAAM,CAACM,UAAP,GAAoB,kCAApB;AACD;;AAED,WAAON,MAAP;AACD,GA5BD;;AA6BA,QAAMQ,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAhB,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACe,IAAD,GAAQC;AAArB,KAAD,CAAT;AACD,GAHD;;AAIA,QAAME,YAAY,GAAIJ,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACK,cAAF;AAEA,QAAIC,UAAU,GAAGb,YAAY,CAACP,MAAD,CAA7B;AACAM,IAAAA,SAAS,CAACc,UAAD,CAAT;;AAEA,QAAIvB,aAAa,CAACuB,UAAD,CAAjB,EAA+B;AAC/B;AACEnB,MAAAA,SAAS,CAAC;AACRC,QAAAA,OAAO,EAAE,EADD;AAERC,QAAAA,OAAO,EAAE,EAFD;AAGRC,QAAAA,MAAM,EAAE;AAHA,OAAD,CAAT;AAKD;AACF,GAdD;;AAgBA,SAAO;AAAES,IAAAA,YAAF;AAAgBK,IAAAA,YAAhB;AAA8BlB,IAAAA,MAA9B;AAAsCK,IAAAA;AAAtC,GAAP;AACD,CA1DD;;GAAMP,W;;AA4DN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\r\nimport IsEmptyObject from \"../../../service/IsEmptyObject\";\r\n\r\nconst useTaskForm = (HandleEditTask) => {\r\n  const [values, setValues] = useState({\r\n    oldpass: \"\",\r\n    newpass: \"\",\r\n    repass: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validateInfo = (values) => {\r\n    let errors = {};\r\n\r\n    const oldpassTemp = values.oldpass.trim();\r\n    const newpassTemp = values.newpass.trim();\r\n    const repassTemp = values.repass.trim();\r\n\r\n    if (!oldpassTemp) {\r\n      errors.oldpass = \"Oldpass must be required\";\r\n    } else if (oldpassTemp.length < 6) {\r\n      errors.oldpass = \"Oldpass to be 6 charactor or more\";\r\n    }\r\n    if (!newpassTemp) {\r\n      errors.newpass = \"Newpass must be required\";\r\n    } else if (newpassTemp.length < 6) {\r\n      errors.newpass = \"Newpass to be 6 charactor or more\";\r\n    } else if (newpassTemp === oldpassTemp) {\r\n      errors.newpass = \"Newpass must be difference from oldpass\";\r\n    }\r\n    if (!repassTemp) {\r\n      errors.repassTemp = \"Repass must be required\";\r\n    } else if (repassTemp.length < 6) {\r\n      errors.repassTemp = \"Repass to be 6 charactor or more\";\r\n    } else if (repassTemp !== oldpassTemp) {\r\n      errors.repassTemp = \"Repass must be math with newpass\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let errorsTemp = validateInfo(values);\r\n    setErrors(errorsTemp);\r\n\r\n    if (IsEmptyObject(errorsTemp)) {\r\n    //   HandleEditTask(values);\r\n      setValues({\r\n        oldpass: \"\",\r\n        newpass: \"\",\r\n        repass: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useTaskForm;\r\n"]},"metadata":{},"sourceType":"module"}
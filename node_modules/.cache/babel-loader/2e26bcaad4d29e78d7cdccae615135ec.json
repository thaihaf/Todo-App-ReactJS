{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport IsEmptyObject from \"../../../service/js/IsEmptyObject\";\nimport GetUser from \"../services/GetUser\";\n\nconst useTaskForm = HandleChangePassword => {\n  _s();\n\n  const [values, setValues] = useState({\n    // oldpass: \"\",\n    newpass: \"\",\n    repass: \"\"\n  });\n  const [errors, setErrors] = useState({});\n\n  const validateInfo = values => {\n    let errors = {}; // const oldpassTemp = values.oldpass.trim();\n\n    const newpassTemp = values.newpass.trim();\n    const repassTemp = values.repass.trim(); // if (!oldpassTemp) {\n    //   errors.oldpass = \"Oldpass must be required\";\n    // } else if (oldpassTemp.length < 6) {\n    //   errors.oldpass = \"Oldpass to be 6 charactor or more\";\n    // }\n    // else if (oldpassTemp !== user.password) {\n    //   errors.oldpass = \"Oldpass not correct\";\n    // }\n\n    if (!newpassTemp) {\n      errors.newpass = \"Newpass must be required\";\n    } else if (newpassTemp.length < 6) {\n      errors.newpass = \"Newpass to be 6 charactor or more\";\n    } // else if (newpassTemp === oldpassTemp) {\n    //   errors.newpass = \"Newpass must be difference from oldpass\";\n    // }\n\n\n    if (!repassTemp) {\n      errors.repass = \"Repass must be required\";\n    } else if (repassTemp.length < 6) {\n      errors.repass = \"Repass to be 6 charactor or more\";\n    } else if (repassTemp != newpassTemp) {\n      errors.repass = \"Repass must be math with newpass\";\n    }\n\n    return errors;\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const userTemp = JSON.parse(localStorage.getItem(\"user\"));\n    let errorsTemp = validateInfo(values);\n    setErrors(errorsTemp);\n\n    if (IsEmptyObject(errorsTemp)) {\n      HandleChangePassword(values, userTemp);\n      setValues({\n        // oldpass: \"\",\n        newpass: \"\",\n        repass: \"\"\n      });\n    }\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useTaskForm, \"Hlpr+ZDxgpFabBzdb8JlQMnqOL8=\");\n\nexport default useTaskForm;","map":{"version":3,"sources":["D:/4.Document/Work/MonstarLab/Intern/ReactJS/todo/src/components/users/services/usePasswordForm.js"],"names":["useState","IsEmptyObject","GetUser","useTaskForm","HandleChangePassword","values","setValues","newpass","repass","errors","setErrors","validateInfo","newpassTemp","trim","repassTemp","length","handleChange","e","name","value","target","handleSubmit","preventDefault","userTemp","JSON","parse","localStorage","getItem","errorsTemp"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,MAAMC,WAAW,GAAIC,oBAAD,IAA0B;AAAA;;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACnC;AACAO,IAAAA,OAAO,EAAE,EAF0B;AAGnCC,IAAAA,MAAM,EAAE;AAH2B,GAAD,CAApC;AAKA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMW,YAAY,GAAIN,MAAD,IAAY;AAC/B,QAAII,MAAM,GAAG,EAAb,CAD+B,CAG/B;;AACA,UAAMG,WAAW,GAAGP,MAAM,CAACE,OAAP,CAAeM,IAAf,EAApB;AACA,UAAMC,UAAU,GAAGT,MAAM,CAACG,MAAP,CAAcK,IAAd,EAAnB,CAL+B,CAO/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAI,CAACD,WAAL,EAAkB;AAChBH,MAAAA,MAAM,CAACF,OAAP,GAAiB,0BAAjB;AACD,KAFD,MAEO,IAAIK,WAAW,CAACG,MAAZ,GAAqB,CAAzB,EAA4B;AACjCN,MAAAA,MAAM,CAACF,OAAP,GAAiB,mCAAjB;AACD,KApB8B,CAqB/B;AACA;AACA;;;AAEA,QAAI,CAACO,UAAL,EAAiB;AACfL,MAAAA,MAAM,CAACD,MAAP,GAAgB,yBAAhB;AACD,KAFD,MAEO,IAAIM,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AAChCN,MAAAA,MAAM,CAACD,MAAP,GAAgB,kCAAhB;AACD,KAFM,MAEA,IAAIM,UAAU,IAAIF,WAAlB,EAA+B;AACpCH,MAAAA,MAAM,CAACD,MAAP,GAAgB,kCAAhB;AACD;;AAED,WAAOC,MAAP;AACD,GAlCD;;AAmCA,QAAMO,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAd,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACa,IAAD,GAAQC;AAArB,KAAD,CAAT;AACD,GAHD;;AAIA,QAAME,YAAY,GAAIJ,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACK,cAAF;AAEA,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAjB;AAEA,QAAIC,UAAU,GAAGjB,YAAY,CAACN,MAAD,CAA7B;AACAK,IAAAA,SAAS,CAACkB,UAAD,CAAT;;AAEA,QAAI3B,aAAa,CAAC2B,UAAD,CAAjB,EAA+B;AAC7BxB,MAAAA,oBAAoB,CAACC,MAAD,EAASkB,QAAT,CAApB;AACAjB,MAAAA,SAAS,CAAC;AACR;AACAC,QAAAA,OAAO,EAAE,EAFD;AAGRC,QAAAA,MAAM,EAAE;AAHA,OAAD,CAAT;AAKD;AACF,GAhBD;;AAkBA,SAAO;AAAEQ,IAAAA,YAAF;AAAgBK,IAAAA,YAAhB;AAA8BhB,IAAAA,MAA9B;AAAsCI,IAAAA;AAAtC,GAAP;AACD,CAlED;;GAAMN,W;;AAoEN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nimport IsEmptyObject from \"../../../service/js/IsEmptyObject\";\r\nimport GetUser from \"../services/GetUser\";\r\n\r\nconst useTaskForm = (HandleChangePassword) => {\r\n  const [values, setValues] = useState({\r\n    // oldpass: \"\",\r\n    newpass: \"\",\r\n    repass: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validateInfo = (values) => {\r\n    let errors = {};\r\n\r\n    // const oldpassTemp = values.oldpass.trim();\r\n    const newpassTemp = values.newpass.trim();\r\n    const repassTemp = values.repass.trim();\r\n\r\n    // if (!oldpassTemp) {\r\n    //   errors.oldpass = \"Oldpass must be required\";\r\n    // } else if (oldpassTemp.length < 6) {\r\n    //   errors.oldpass = \"Oldpass to be 6 charactor or more\";\r\n    // }\r\n    // else if (oldpassTemp !== user.password) {\r\n    //   errors.oldpass = \"Oldpass not correct\";\r\n    // }\r\n\r\n    if (!newpassTemp) {\r\n      errors.newpass = \"Newpass must be required\";\r\n    } else if (newpassTemp.length < 6) {\r\n      errors.newpass = \"Newpass to be 6 charactor or more\";\r\n    }\r\n    // else if (newpassTemp === oldpassTemp) {\r\n    //   errors.newpass = \"Newpass must be difference from oldpass\";\r\n    // }\r\n\r\n    if (!repassTemp) {\r\n      errors.repass = \"Repass must be required\";\r\n    } else if (repassTemp.length < 6) {\r\n      errors.repass = \"Repass to be 6 charactor or more\";\r\n    } else if (repassTemp != newpassTemp) {\r\n      errors.repass = \"Repass must be math with newpass\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const userTemp = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    let errorsTemp = validateInfo(values);\r\n    setErrors(errorsTemp);\r\n\r\n    if (IsEmptyObject(errorsTemp)) {\r\n      HandleChangePassword(values, userTemp);\r\n      setValues({\r\n        // oldpass: \"\",\r\n        newpass: \"\",\r\n        repass: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useTaskForm;\r\n"]},"metadata":{},"sourceType":"module"}